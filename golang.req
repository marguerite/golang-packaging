#!/usr/bin/env ruby

if File.exist? "/tmp/shared"

require '/usr/lib/rpm/golang/rpmsysinfo.rb'
include RpmSysinfo
buildroot = RpmSysinfo.get_buildroot
contribdir = RpmSysinfo.get_go_contribdir
importpath = RpmSysinfo.get_go_importpath

def go_get_version()
  IO.popen("go version") do |process|
    process.each_line do |l|
      # "go version go1.6.1 linux/amd64"
      version_re = /^go version go([0-9]\.[0-9])(\.[0-9])?\s+([^\/]+)\/(.*)$/
      md = version_re.match(l.chomp)
      # 1:"1.6" 2:".1" or nil 3:"linux" 4:"amd64"
      return md[1] if md
    end
  end
end

# read stdin for filelist rpm feeds us for a (sub) package
filelist = []
ARGF.each do |l|
	# if line has "*.a"
	# buildroot + go_contribdir + github.com/stretchr/testify/assert.a
	if l.index(".a\n")
		unless l.gsub(buildroot + contribdir + '/' + importpath,'').index(/test|example/)
			filelist << l.strip!
		end
	end
end

requires = []

unless filelist.empty? then

	requires << "golang(API) = " + go_get_version()

	filelist.each do |f|
		# unarchive .a
		system("ar -x #{f} __.PKGDEF")
		# read imports
		File.open("__.PKGDEF","r:UTF-8") do |f1|
			f1.each do |l|
				if l.index(/import\s/)
					# import runtime "golang.org/x/net/uniform"
					if ( l.index(/(\.com|\.net|\.org|gopkg\.in)/) && ! l.index(importpath) )
						# import splice "github.com/hanwen/go-fuse/splice" // indirect
						if l.index("indirect")
							v = l.strip!.gsub(/\s\/\/\sindirect/,'').gsub(/"$/,'').gsub(/^.*"/,'')
						else
							v = l.strip!.gsub(/"$/,'').gsub(/^.*"/,'')
						end
						requires << "golang(" + v + ")"
					end
				end
			end
		end
		# clean
		File.delete("__.PKGDEF")
	end

	requires.each do |p|
		puts p
	end

end

end
